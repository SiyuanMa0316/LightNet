{
    "name": "ep_cuda",
    "arch": "cuda",
    "author": "Zhao Zhixu",
    "ops": [
        {
            "optype": "conv2d",
            "rules": [
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2]",
                        "self.params[padding][1] != self.params[padding][3]"
                    ],
                    "replace": ["conv2d_cuda"]
                }
            ]
        },
        {
            "optype": "batchnorm",
            "rules": [
                {
                    "cond": [],
                    "replace": ["bn2scale_wts_cpu bwc", "tensorrt trt"],
                    "details": [
                        "bwc.ins[src_mean] = self.ins[mean]",
                        "bwc.ins[src_var] = self.ins[var]",
                        "bwc.ins[src_scale] = self.ins[scale]",
                        "bwc.ins[src_offset] = self.ins[offset]",
                        "bwc.params[epsilon] = self.params[epsilon]",

                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.outs[weight$@] = bwc.outs[dst_shift]",
                        "trt.outs[weight$@] = bwc.outs[dst_scale]",
                        "trt.outs[weight$@] = bwc.outs[dst_power]",
                        "trt.params[op$@] = \"scale\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_shift] = bwc.outs[dst_shift]",
                        "trt.params[op$^_scale] = bwc.outs[dst_scale]",
                        "trt.params[op$^_power] = bwc.outs[dst_power]",
                        "trt.params[op$^_scale_mode] = \"kCHANNEL\"",
                        "trt.params[batch_size] = self.ins[src].dims[0]",
                    ]
                }
            ]
        },
        {
            "optype": "concat",
            "rules": [
                {
                    "cond": [
                        "self.params[axis] == 0",
                        "LN_TRT_VER(\"4.0.0\") < 0 && self.ins[src1].ndim < 4 && self.params[axis] != 1",
                        "LN_TRT_VER(\"4.0.0\") < 0 && self.ins[src1].ndim >= 4 && self.params[axis] != self.ins[src1].ndim - 3"
                    ],
                    "replace": ["concat_cuda"]
                },
                {
                    "cond": ["LN_TRT_VER(\"4.0.0\") < 0"],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]1",
                        "trt.ins[src$@] = self.ins[src]2",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[op$@] = \"concat\"",
                        "trt.params[op$^_src1] = self.ins[src]1",
                        "trt.params[op$^_src2] = self.ins[src]2",
                        "trt.params[batch_size] = self.ins[src]1.dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]1",
                        "trt.ins[src$@] = self.ins[src]2",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[op$@] = \"concat\"",
                        "trt.params[op$^_src1] = self.ins[src]1",
                        "trt.params[op$^_src2] = self.ins[src]2",
                        "trt.params[op$^_axis] = self.axis",
                        "trt.params[batch_size] = self.ins[src]1.dims[0]"
                    ]
                }
            ]
        },
        {
            "optype": "print",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["print_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["print_cuda"]
                },
                {
                    "cond": [],
                    "err": "optype 'print''s 'src' is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
        {
            "optype": "fprint",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["fprint_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["fprint_cuda"]
                },
                {
                    "cond": [],
                    "err": "optype 'fprint''s 'src' is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
    ]
}
