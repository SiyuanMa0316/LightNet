#define DTYPE TL_FLOAT

#define conv(in_name, out_name, in_c, out_c,                            \
             _group, _size, _stride, _padding, _dilation)               \
    create(| dst=out_name##_wts |                                       \
           dtype=DTYPE, dims=[out_c, ${eval in_c/_group}, _size, _size], \
           ran=[-10, 10], data=[0], from_file=false);                   \
    create(| dst=out_name##_bias | dtype=DTYPE, dims=[out_c],           \
           ran=[-10, 10], data=[0], from_file=false);                   \
    conv2d(src=in_name, weight=out_name##_wts, bias=out_name##_bias |   \
           dst=out_name | group=_group, size=[_size, _size],            \
           stride=[_stride, _stride],                                   \
           padding=[_padding, _padding, _padding, _padding],            \
           dilation=[_dilation, _dilation])

#define conv_bn_relu(in_name, out_name, in_c, out_c,                    \
                     _group, _size, _stride, _padding, _dilation)       \
    conv(in_name, out_name##_conv, in_c, out_c,                         \
         _group, _size, _stride, _padding, _dilation);                  \
    create(| dst=out_name##_scale | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_offset | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_mean | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_var | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    batchnorm(src=out_name##_conv, scale=out_name##_scale,              \
              offset=out_name##_offset, mean=out_name##_mean, var=out_name##_var \
              | dst=out_name##_bn | epsilon=1e-6);                      \
    relu(src=out_name##_bn | dst=out_name |)

#define conv_bn(in_name, out_name, in_c, out_c,                         \
                _group, _size, _stride, _padding, _dilation)            \
    conv(in_name, out_name##_conv, in_c, out_c,                         \
         _group, _size, _stride, _padding, _dilation);                  \
    create(| dst=out_name##_scale | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_offset | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_mean | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_var | dtype=DTYPE, dims=[out_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    batchnorm(src=out_name##_conv, scale=out_name##_scale,              \
              offset=out_name##_offset, mean=out_name##_mean, var=out_name##_var \
              | dst=out_name | epsilon=1e-6)

#define depthwise_conv_bn(in_name, out_name, in_c,                      \
                          _size, _stride, _padding, _dilation)          \
    conv(in_name, out_name##_conv, in_c, in_c,                          \
         in_c, _size, _stride, _padding, _dilation);                    \
    create(| dst=out_name##_scale | dtype=DTYPE, dims=[in_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_offset | dtype=DTYPE, dims=[in_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_mean | dtype=DTYPE, dims=[in_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    create(| dst=out_name##_var | dtype=DTYPE, dims=[in_c], ran=[-10, 10], \
           data=[0], from_file=false);                                  \
    batchnorm(src=out_name##_conv, scale=out_name##_scale,              \
              offset=out_name##_offset, mean=out_name##_mean, var=out_name##_var \
              | dst=out_name | epsilon=1e-6)

#define shuffle(in_name, out_name, g, c, h, w)                          \
    reshape(src=in_name | dst=out_name##_shuffle_reshape1 |             \
            dims=[1, g, ${eval c/g}, h, w]);                            \
    transpose(src=out_name##_shuffle_reshape1 | dst=out_name##_shuffle_trans \
              | axes=[0, 2, 1, 3, 4]);                                  \
    reshape(src=out_name##_shuffle_trans | dst=out_name |               \
            dims=[1, c, h, w])

#define shufflev2_block(in_name, out_name, g, c, h, w,                  \
                        _size, _stride, _padding, _dilation)            \
    slice(src=in_name | dst=out_name##_slice1 |                         \
          axis=1, start=0, len=${eval c/2});                            \
    slice(src=in_name | dst=out_name##_slice2 |                         \
          axis=1, start=${eval c/2}, len=${eval c/2});                  \
    conv_bn_relu(out_name##_slice2, out_name##_conv1,                   \
                 ${eval c/2}, ${eval c/2}, 1, 1, 1, 0, 1);              \
    depthwise_conv_bn(out_name##_conv1, out_name##_conv2, ${eval c/2},  \
                      _size, _stride, _padding, _dilation);             \
    conv_bn_relu(out_name##_conv2, out_name##_conv3,                    \
                 ${eval c/2}, ${eval c/2}, 1, 1, 1, 0, 1);              \
    concat(src1=out_name##_slice1, src2=out_name##_conv3 |              \
           dst=out_name##_concat | axis=1);                             \
    shuffle(out_name##_concat, out_name, g, c, h, w)

#define shufflev2_downsample(in_name, out_name, g, in_c, out_c,         \
                             h, w, _size, _stride, _padding, _dilation) \
    conv_bn_relu(in_name, out_name##_conv1,                             \
                 in_c, ${eval out_c/2}, 1, 1, 1, 0, 1);                 \
    depthwise_conv_bn(out_name##_conv1, out_name##_conv2, ${eval out_c/2}, \
                      _size, _stride, _padding, _dilation);             \
    conv_bn_relu(out_name##_conv2, out_name##_conv3,                    \
                 ${eval out_c/2}, ${eval out_c/2}, 1, 1, 1, 0, 1);      \
    depthwise_conv_bn(in_name, out_name##_conv4, in_c,                  \
                      _size, _stride, _padding, _dilation);             \
    conv_bn_relu(out_name##_conv4, out_name##_conv5,                    \
                 in_c, ${eval out_c/2}, 1, 1, 1, 0, 1);                 \
    concat(src1=out_name##_conv5, src2=out_name##_conv3 |               \
           dst=out_name##_concat | axis=1);                             \
    shuffle(out_name##_concat, out_name, g, out_c, h, w)

#define INPUT_H 368
#define INPUT_W 640
#define IMG_H 375
#define IMG_W 1242

#define CLASS 12
#define GROUP 2

#define STAGE2_C_0_5 48
#define STAGE3_C_0_5 96
#define STAGE4_C_0_5 192
#define CONV5_C_0_5 1024

#define STAGE2_C_1_0 116
#define STAGE3_C_1_0 232
#define STAGE4_C_1_0 464
#define CONV5_C_1_0 1024

#define STAGE2_C_1_5 176
#define STAGE3_C_1_5 352
#define STAGE4_C_1_5 704
#define CONV5_C_1_5 1024

#define STAGE2_C_2_0 244
#define STAGE3_C_2_0 488
#define STAGE4_C_2_0 976
#define CONV5_C_2_0 2048

#define STAGE2_C_DET 64
#define STAGE3_C_DET 128
#define STAGE4_C_DET 256

#define STAGE2_H_DET 46
#define STAGE3_H_DET 23
#define STAGE4_H_DET 12

#define STAGE2_W_DET 80
#define STAGE3_W_DET 40
#define STAGE4_W_DET 20

#define STAGE2_C STAGE2_C_DET
#define STAGE3_C STAGE3_C_DET
#define STAGE4_C STAGE4_C_DET

#define STAGE2_H STAGE2_H_DET
#define STAGE3_H STAGE3_H_DET
#define STAGE4_H STAGE4_H_DET

#define STAGE2_W STAGE2_W_DET
#define STAGE3_W STAGE3_W_DET
#define STAGE4_W STAGE4_W_DET

#define PREDS_C ${eval ANCHOR_PER_GRID * (CLASS + 1 + 4)}

#define X_SHIFT -20
#define Y_SHIFT -20

#define CONVOUT_H 12
#define CONVOUT_W 20
#define CONVOUT_C 153
#define ANCHOR_PER_GRID 9
/* #define CLASS_SLICE_C ${eval ANCHOR_PER_GRID * CLASS} */
#define CLASS_SLICE_C 108
#define CONF_SLICE_C ANCHOR_PER_GRID
#define BBOX_SLICE_C ${eval ANCHOR_PER_GRID * 4}
#define OUTPUT_CLS_SIZE CLASS
#define OUTPUT_BBOX_SIZE 4
#define ANCHOR_NUM ${eval ANCHOR_PER_GRID * CONVOUT_H * CONVOUT_W}
#define TOP_N_DETECTION 64

create(| dst=input | dtype=DTYPE, dims=[1, 3, INPUT_H, INPUT_W], ran=[0, 255],
       data=[0], from_file=true);
conv_bn_relu(input, conv1, 3, 24, 1, 3, 2, 1, 1);
maxpool2d(src=conv1 | dst=pool1 | size=[2, 2], stride=[2, 2], padding=[0, 0, 0, 0]);
shufflev2_downsample(pool1, stage2_downsample, GROUP, 24,
                     STAGE2_C, STAGE2_H, STAGE2_W, 3, 2, 1, 1);
shufflev2_block(stage2_downsample, stage2_shuffle1, GROUP, STAGE2_C,
                STAGE2_H, STAGE2_W, 3, 1, 1, 1);
shufflev2_block(stage2_shuffle1, stage2_shuffle2, GROUP, STAGE2_C,
                STAGE2_H, STAGE2_W, 3, 1, 1, 1);
shufflev2_block(stage2_shuffle2, stage2_shuffle3, GROUP, STAGE2_C,
                STAGE2_H, STAGE2_W, 3, 1, 1, 1);
shufflev2_downsample(stage2_shuffle3, stage3_downsample, GROUP, STAGE2_C,
                     STAGE3_C, STAGE3_H, STAGE3_W, 3, 2, 1, 1);
shufflev2_block(stage3_downsample, stage3_shuffle1, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle1, stage3_shuffle2, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle2, stage3_shuffle3, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle3, stage3_shuffle4, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle4, stage3_shuffle5, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle5, stage3_shuffle6, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_block(stage3_shuffle6, stage3_shuffle7, GROUP, STAGE3_C,
                STAGE3_H, STAGE3_W, 3, 1, 1, 1);
shufflev2_downsample(stage3_shuffle7, stage4_downsample, GROUP, STAGE3_C,
                     STAGE4_C, STAGE4_H, STAGE4_W, 3, 2, 1, 1);
shufflev2_block(stage4_downsample, stage4_shuffle1, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle1, stage4_shuffle2, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle2, stage4_shuffle3, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle3, stage4_shuffle4, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle4, stage4_shuffle5, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle5, stage4_shuffle6, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle6, stage4_shuffle7, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle7, stage4_shuffle8, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
shufflev2_block(stage4_shuffle8, stage4_shuffle9, GROUP, STAGE4_C,
                STAGE4_H, STAGE4_W, 3, 1, 1, 1);
conv(stage4_shuffle9, preds, STAGE4_C, PREDS_C, 1, 3, 1, 1, 1);

slice(src=preds | dst=slice_class | axis=1, start=0, len=CLASS_SLICE_C);
slice(src=preds | dst=slice_conf | axis=1, start=CLASS_SLICE_C,
      len=CONF_SLICE_C);
slice(src=preds | dst=slice_bbox | axis=1, start=${eval CLASS_SLICE_C + CONF_SLICE_C},
      len=BBOX_SLICE_C);
softmax(src=slice_class | dst=softmax_class | axis=1);
sigmoid(src=slice_conf | dst=sigmoid_conf |);
reshape(src=softmax_class | dst=reshape_class |
        dims=[1, ANCHOR_PER_GRID, OUTPUT_CLS_SIZE, CONVOUT_H, CONVOUT_W]);
reshape(src=sigmoid_conf | dst=reshape_conf |
        dims=[1, ANCHOR_PER_GRID, 1, CONVOUT_H, CONVOUT_W]);
reshape(src=slice_bbox | dst=reshape_bbox |
        dims=[1, ANCHOR_PER_GRID, OUTPUT_BBOX_SIZE, CONVOUT_H, CONVOUT_W]);
transpose(src=reshape_class | dst=transpose_class | axes=[0, 3, 4, 1, 2]);
transpose(src=reshape_conf | dst=transpose_conf | axes=[0, 3, 4, 1, 2]);
transpose(src=reshape_bbox | dst=transpose_bbox | axes=[0, 3, 4, 1, 2]);
maxreduce_arg(src=transpose_class | dst=maxreduce_dst, arg=maxreduce_arg |
              axis=4);
elew(src1=maxreduce_dst, src2=transpose_conf | dst=elew0 | elew_op=TL_MUL);
create(| dst=anchors | dtype=DTYPE,
       dims=[1, CONVOUT_H, CONVOUT_W, ANCHOR_PER_GRID, 4], ran=[0,100],
       data=[0], from_file=true);
transform_bboxSQD(src_delta=transpose_bbox, src_anchor=anchors | dst=bbox |
                  width=INPUT_W, height=INPUT_H, img_width=IMG_W,
                  img_height=IMG_H, x_shift=X_SHIFT, y_shift=Y_SHIFT);
create(| dst=index | dtype=TL_INT32, dims=[ANCHOR_NUM], ran=[0,10], data=[0], from_file=false);
rearange(src=index | dst=index_rearrange | start=0, step=1, stop=ANCHOR_NUM);
reshape(src=transpose_conf | dst=reshape_conf1d | dims=[ANCHOR_NUM]);
sort1d_by_key(src_key=reshape_conf1d, src_val=index_rearrange |
              dst_key=sort_conf1d, dst_val=sort_index |
              dir=TL_SORT_DIR_DESCENDING);
reshape(src=elew0 | dst=elew01d | dims=[ANCHOR_NUM]);
reshape(src=maxreduce_arg | dst=maxreduce_arg1d | dims=[ANCHOR_NUM]);
reshape(src=bbox | dst=bbox1d | dims=[${eval ANCHOR_NUM * 4}]);
pick1d(src=elew01d, src_index=sort_index | dst=final_prob | len=TOP_N_DETECTION,
       stride=1);
pick1d(src=maxreduce_arg1d, src_index=sort_index | dst=final_class |
       len=TOP_N_DETECTION, stride=1);
pick1d(src=bbox1d, src_index=sort_index | dst=final_bbox |
       len=TOP_N_DETECTION, stride=OUTPUT_BBOX_SIZE);
