{
    "ops": [
        {
            "optype": "transpose",
            "author": "Zhao Zhixu",
            "arch": "none",
            "tensors_in": [
                {"arg_name": "src", "mtype": "LN_MEM_NONE"}
            ],
            "tensors_out": [
                {"arg_name": "dst", "mtype": "LN_MEM_NONE",
                 "ndim": "src->ndim", "dtype": "src->dtype",
                 "custom": "dst_dims = ln_alloc(src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    dst_dims[i] = src->dims[axes[i]];",
                 "cleanup": "ln_free(dst_dims);"}
            ],
            "params": [
                {"arg_name": "axes", "ptype": "LN_PARAM_ARRAY_NUMBER",
                 "realtype": "int", "ge": 0,
                 "custom": "int *tmp = ln_alloc(src->ndim*sizeof(int));\nmemset(tmp, 0, src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    tmp[axes[i]] = 1;\nfor (int i = 0; i < src->ndim; i++)\n    ln_opck_param_satisfy_msg(tmp[i], \"`axes` should match `src`'s shape\");\nln_free(tmp);"}
            ]
        },
        {
            "optype": "transpose_cpu",
            "author": "Zhao Zhixu",
            "arch": "cpu",
            "tensors_in": [
                {"arg_name": "src", "mtype": "LN_MEM_CPU"}
            ],
            "tensors_out": [
                {"arg_name": "dst", "mtype": "LN_MEM_CPU",
                 "ndim": "src->ndim", "dtype": "src->dtype",
                 "custom": "dst_dims = ln_alloc(src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    dst_dims[i] = src->dims[axes[i]];",
                 "cleanup": "ln_free(dst_dims);"}
            ],
            "params": [
                {"arg_name": "axes", "ptype": "LN_PARAM_ARRAY_NUMBER",
                 "realtype": "int", "ge": 0,
                 "custom": "int *tmp = ln_alloc(src->ndim*sizeof(int));\nmemset(tmp, 0, src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    tmp[axes[i]] = 1;\nfor (int i = 0; i < src->ndim; i++)\n    ln_opck_param_satisfy_msg(tmp[i], \"`axes` should match `src`'s shape\");\nln_free(tmp);"}
            ],
            "run": "tl_tensor_transpose(priv->src, priv->dst, priv->axes);"
        },
        {
            "optype": "transpose_cuda",
            "author": "Zhao Zhixu",
            "arch": "cuda",
            "tensors_in": [
                {"arg_name": "src", "mtype": "LN_MEM_CUDA"}
            ],
            "tensors_out": [
                {"arg_name": "dst", "mtype": "LN_MEM_CUDA",
                 "ndim": "src->ndim", "dtype": "src->dtype",
                 "custom": "dst_dims = ln_alloc(src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    dst_dims[i] = src->dims[axes[i]];",
                 "cleanup": "ln_free(dst_dims);"}
            ],
            "params": [
                {"arg_name": "axes", "ptype": "LN_PARAM_ARRAY_NUMBER",
                 "realtype": "int", "ge": 0,
                 "custom": "int *tmp = ln_alloc(src->ndim*sizeof(int));\nmemset(tmp, 0, src->ndim*sizeof(int));\nfor (int i = 0; i < src->ndim; i++)\n    tmp[axes[i]] = 1;\nfor (int i = 0; i < src->ndim; i++)\n    ln_opck_param_satisfy_msg(tmp[i], \"`axes` should match `src`'s shape\");\nln_free(tmp);"}
            ],
            "run": "tl_tensor_transpose_cuda(priv->src, priv->dst, priv->axes);"
        }
    ]
}
